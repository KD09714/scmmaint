<!-- Modification History -->

<!-- Dharmendra Kumar   01/28/2014  Zip the package at last.                                  -->
<!-- Dharmendra Kumar   01/22/2014  Update rollback code.                                     -->
<!-- Dharmendra Kumar   01/21/2014  In case user does not opt to Rollback.                    
			            Edit Email subject.                                       -->
<!-- Dharmendra Kumar   01/17/2014  Add verifybackup target.                                  -->
<!-- Dharmendra Kumar   01/17/2014  zip the backup package, Add Rollback functionality        -->
<!-- Dharmendra Kumar   12/23/2013  Added support to replace config token in CacheConsole.    -->
<!-- Dharmendra Kumar   12/20/2013  Added functionality to install CacheConsole.
                                    Split Install and QCInstall target.
									Add VerifyPackage target.								  -->
<!-- Dharmendra Kumar   11/28/2013  Added functionality to replace token with password        -->
<!-- Dharmendra Kumar	11/25/2013	Initial coding to deploy wealthportal package on UAT/PROD -->
<!-- version 2014.0.6 -->
<project name="DeployOnIIS" basedir=".." default="MachineInfo">
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<tstamp>
		<format property="timestamp" pattern="yyyyMMdd"/>
		<format property="timestamp-HHmm" pattern="yyyyMMdd-HHmm"/>
	</tstamp>
	
	<property file="cfg/deploy.cfg"/>
	<property file="cfg/lastinstall.cfg" />
	<property name="patchdir" value="D:/wealthportal" />
    <mkdir dir="${patchdir}/${timestamp}/log" />
	<record name="${patchdir}/${timestamp}/log/install-${timestamp-HHmm}.log" />
	<record name="${patchdir}/${timestamp}/log/install.debug-${timestamp-HHmm}.log" loglevel="verbose" />
	
	<property environment="env" />
	<property name="app" value="${virtualdir}" />
	<property name="iishome" value="C:/inetpub/wwwroot" />
	<property name="emailuser" value="${env.USERNAME}@sungard.com" />
	<property name="defaultemailto" value="codemovegrp1@sungard.com" />
	<mkdir dir="${patchdir}/${timestamp}/new" />
	
	<target name="MachineInfo">
		<echo message="TIMESTAMP : ${timestamp-HHmm}"/>
		<echo message="SERVER    : ${env.COMPUTERNAME}" />
		<echo message="DOMAIN    : ${env.USERDOMAIN}" />
		<echo message="USER      : ${env.USERNAME}" />		
	</target>
	
	<target name="VerifyPackage">
		<if>
			<available file="${patchdir}/${timestamp}/new/${package}.zip" />
			<then>
				<property name="package.exists" value="true" />
				<echo message="${package} Exists for Installation....!!" />
			</then>
			<else>
				<fail message="${patchdir}/${timestamp}/new/${package}.zip does not Exists..!!!" />
			</else>
		</if>
		
		<if>
			<available file="${patchdir}/${timestamp}/new/${themepackage}.zip" />
			<then>
				<property name="themepackage.exists" value="true" />
				<echo message="${themepackage} Exists for Installation....!!" />
			</then>
		</if>
		
		<if>
			<available file="${patchdir}/${timestamp}/new/${consolepackage}.zip" />
			<then>
				<property name="consolepackage.exists" value="true" />
				<echo message="${consolepackage} Exists for Installation....!!" />
			</then>
		</if>
	</target>
	
	<target name="StopIIS" unless="applicationpool">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="iisreset /stop" />
		</exec>
	</target>
	
	<target name="StartIIS" unless="applicationpool">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="iisreset /start" />
		</exec>
	</target>
	
	<target name="StopWebIIS" if="webserver">
		<exec executable="cmd" >
			<arg value="/c" />
			<arg value="sc \\${webserver} stop iisadmin" />
		</exec>
	</target>
	
	<target name="StartWebIIS" if="webserver">
		<exec executable="cmd" >
			<arg value="/c" />
			<arg value="sc \\${webserver} start iisadmin" />
		</exec>
	</target>
	
	<target name="RestartIIS" unless="applicationpool">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="iisreset /restart" />
		</exec>
	</target>
	
	<target name="StopAppPool" if="applicationpool">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="appcmd stop apppool /apppool.name:${applicationpool}" />
		</exec>
	</target>
	
	<target name="StartAppPool" if="applicationpool">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="appcmd start apppool /apppool.name:${applicationpool}" />
		</exec>
	</target>
	
	<target name="RestartAppPool" depends="StopAppPool, StartAppPool">
		<echo message="Restart completed." />
	</target>

	<target name="BackupCurrInstall" >
		<if>
			<available file="${patchdir}/${timestamp}/backup/${package}.zip" />
			<then>
				<move file="${patchdir}/${timestamp}/backup/${package}.zip" tofile="${patchdir}/${timestamp}/backup/${package}-${timestamp-HHmm}.zip" preservelastmodified="true" />
			</then>
		</if>
		
		<echo message="Backing up the current installation.." />
		<mkdir dir="${iishome}/${app}" />
		<copy todir="${patchdir}/${timestamp}/backup/${app}" preservelastmodified="true" overwrite="true" force="true">
			<fileset dir="${iishome}/${app}" />
		</copy>
		<delete dir="${iishome}/${app}" />
	</target>

	<target name="CopyPackage" if="packagesource">
		<copy todir="${patchdir}/${timestamp}/new" >
			<fileset dir="${packagesource}" >
				<include name="*.zip" />
			</fileset>
		</copy>
	</target>
	
	<target name="InstallNewPackage" depends="BackupCurrInstall" >
		<unzip src="${patchdir}/${timestamp}/new/${package}.zip" dest="${patchdir}/${timestamp}/new" />
		<move todir="${iishome}/${app}" preservelastmodified="true" >
			<fileset dir="${patchdir}/${timestamp}/new/${package}" />
		</move>
	</target>
	
	<target name="VerifyBackup">
		<echo message="Last Backup Date is found to be ${lastbackupdate}" />
		<if>
			<available file="${patchdir}/${lastbackupdate}/backup/${package}.zip" />
			<then>
				<input message="Do you want to revert with the backup of ${lastbackupdate}" validargs="y,n" addproperty="confirmrollback" />
			</then>
			<else>
				<fail message="${patchdir}/${lastbackupdate}/backup/${package}.zip does not exists..!!" />
			</else>
		</if>
		<if>
			<equals arg1="${confirmrollback}" arg2="n" />
			<then>
				<fail message="User has opted not to proceed ....., Exiting." />
			</then>
			<else>
				<copy file="${patchdir}/${lastbackupdate}/backup/${package}.zip" todir="${patchdir}/${timestamp}/rollback" overwrite="true" force="true" />
			</else>
		</if>
	</target>
	
	<target name="RevertPackage">
		<if>
			<equals arg1="${confirmrollback}" arg2="y" />
			<then>
				<unzip src="${patchdir}/${timestamp}/rollback/${package}.zip" dest="${patchdir}/${timestamp}/rollback" />
				<move todir="${iishome}/${app}" preservelastmodified="true" >
					<fileset dir="${patchdir}/${timestamp}/rollback/${package}" />
				</move>
			</then>
		</if>
	</target>
	
	<target name="InstallCacheConsole" if="consolepackage" >
		<if>
			<available file="${patchdir}/${timestamp}/new/${consolepackage}.zip" />
			<then>
				<property name="consolepackage.exists" value="true" />
				<if>
					<available file="${patchdir}/${timestamp}/backup/${consolepackage}" type="dir" />
					<then>
						<move file="${patchdir}/${timestamp}/backup/${consolepackage}" tofile="${patchdir}/${timestamp}/backup/${consolepackage}-${timestamp-HHmm}" preservelastmodified="true" />
					</then>
				</if>
		
				<echo message="Backing up the Current Cache Console installation.." />
				<mkdir dir="${consolehome}/${consoledir}" />
				<copy todir="${patchdir}/${timestamp}/backup/${consoledir}" preservelastmodified="true" overwrite="true" force="true">
					<fileset dir="${consolehome}/${consoledir}" />
				</copy>
				<delete dir="${consolehome}/${consoledir}" />
	
				<unzip src="${patchdir}/${timestamp}/new/${consolepackage}.zip" dest="${patchdir}/${timestamp}/new" />
				<move todir="${consolehome}/${consoledir}" preservelastmodified="true" >
					<fileset dir="${patchdir}/${timestamp}/new/${consolepackage}" />
				</move>
				<if>
				<equals arg1="${package.exists}" arg2="true" />
				<else>
					<antcall target="SetupConfigFiles" />
				</else>
				</if>
			</then>
			<else>
				<echo message="${patchdir}/${timestamp}/new/${consolepackage}.zip does not exists, skipping installation..!!!" />
			</else>
		</if>
	</target>
	
	<target name="SetupConfigFiles">
		<if>
			<equals arg1="${package.exists}" arg2="true" />
			<then>
				<for list="${configtosetup}" delimiter=";" param = "cfgfilewpath">
					<sequential>
						<var name="cfgfile" unset="true"/>
						<var name="cfgdir" unset="true"/>
						<var name="cfgfilewoext" unset="true"/>
		
						<basename file="${iishome}/${app}/@{cfgfilewpath}" property="cfgfile" />
						<dirname file="${iishome}/${app}/@{cfgfilewpath}" property="cfgdir" />
						<for list="${cfgfile}" delimiter="." param = "ext">
							<sequential>
								<var name="ext" unset="true"/>
								<property name="ext" value="@{ext}" />
								<property name="cfgfilewoext" value="@{ext}" />
							</sequential>
						</for>
						<move file="${cfgdir}/${cfgfilewoext}.${envprofile}.${ext}" tofile="${cfgdir}/${cfgfilewoext}.${ext}" preservelastmodified="true" force="true" />
						<echo message="Configuring ${cfgdir}/${cfgfile} completed." />
					</sequential>
				</for>
			</then>
		</if>
		<if>
			<equals arg1="${consolepackage.exists}" arg2="true" />
			<then>
				<move file="${consolehome}/${consoledir}/Sungard.Trust.WealthPortal.ClearCacheConsole.exe.${envprofile}.config" tofile="${consolehome}/${consoledir}/Sungard.Trust.WealthPortal.ClearCacheConsole.exe.config" preservelastmodified="true" force="true" />
				<replace file="${consolehome}/${consoledir}/Sungard.Trust.WealthPortal.ClearCacheConsole.exe.config">
					<replacefilter token="@ServerName@" value="${ServerName}" />
					<replacefilter token="@FlagCheck@" value="${FlagCheck}" />
					<replacefilter token="@FlagSet@" value="${FlagSet}" />
				</replace>
			</then>
		</if>
	</target>
	
	<target name="ApplyCustomTheme" if="themepackage">
		<if>
			<equals arg1="${themepackage.exists}" arg2="true" />
			<then>
				<unzip src="${patchdir}/${timestamp}/new/${themepackage}.zip" dest="${patchdir}/${timestamp}/new" />
				<delete dir="${iishome}/${app}/App_Themes/Default" />
				<move todir="${iishome}/${app}/App_Themes" preservelastmodified="true" >
					<fileset dir="${patchdir}/${timestamp}/new/${themepackage}/MyThemes" />
				</move>
				<delete dir="${patchdir}/${timestamp}/new/${themepackage}" />
			</then>
			<else>
				<if>
					<available file="${patchdir}/${timestamp}/backup/${app}/App_Themes/Default" type="dir" />
					<then>
						<echo message="Applying theme from the backup of last installation ..!!" />
						<delete dir="${iishome}/${app}/App_Themes/Default" />
						<copy todir="${iishome}/${app}/App_Themes" preservelastmodified="true" >
							<fileset dir="${patchdir}/${timestamp}/backup/${app}/App_Themes/Default" />
						</copy>
					</then>
					<else>
						<echo message="Backup folder does not contain theme directory..!!" />
					</else>
				</if>
			</else>
		</if>
	</target>
	
	<target name="Install" depends="MachineInfo, VerifyPackage, StopAppPool, BackupCurrInstall, InstallNewPackage, ApplyCustomTheme, InstallCacheConsole, SetupConfigFiles, StartAppPool">
		<echo message="Installation Completed for ${package}." />
		
	<!-- Zip the backup package -->
		<move file="${patchdir}/${timestamp}/backup/${app}" tofile="${patchdir}/${timestamp}/backup/${package}" />
		<zip destfile="${patchdir}/${timestamp}/backup/${package}.zip" >
			<fileset dir="${patchdir}/${timestamp}/backup/" >
				<include name="${package}/**" />
			</fileset>
		</zip>
		<delete dir="${patchdir}/${timestamp}/backup/${package}" />
		
		<property name="subject" value="Installation Completed for ${package} on ${env.COMPUTERNAME}" />
		<antcall target="EmailNotification" />
		<record name="${patchdir}/${timestamp}/log/install.debug-${timestamp-HHmm}.log" loglevel="verbose" action="stop" />
	<!-- Post Installation Steps -->
		<input message="Please Enter Database password (App Server) Or Infinity password (Web Server) :" addproperty="SunGard" />
		<replace file="${iishome}/${app}/Web.config">
			<replacefilter token="@SunGard@" value="${SunGard}" />
		</replace>
		<echo message="lastbackupdate=${timestamp}" file="cfg/lastinstall.cfg" force="true" />
	</target>

	<target name="Rollback" depends="MachineInfo, VerifyBackup, StopAppPool, BackupCurrInstall, RevertPackage, StartAppPool">
		<echo message="Rollback Completed for ${package}." />
		<property name="subject" value="Rollback Completed for ${package} on ${env.COMPUTERNAME}" />
		<antcall target="EmailNotification" />
	</target>
	
	<target name="QCInstall" depends="MachineInfo, CopyPackage, VerifyPackage, StopWebIIS, StopIIS, BackupCurrInstall, InstallNewPackage, ApplyCustomTheme, InstallCacheConsole, SetupConfigFiles, StartIIS, StartWebIIS">
		<echo message="Installation Completed for ${package}." />
		<antcall target="EmailNotification" />
		<record name="${patchdir}/${timestamp}/log/install.debug-${timestamp-HHmm}.log" loglevel="verbose" action="stop" />
	<!-- Post Installation Steps -->
		<input message="Please Enter Database password (App Server) Or Infinity password (Web Server) :" addproperty="SunGard" />
		<replace file="${iishome}/${app}/Web.config">
			<replacefilter token="@SunGard@" value="${SunGard}" />
		</replace>
		<echo message="lastbackupdate=${timestamp}" file="cfg/lastinstall.cfg" force="true" />
	</target>
	
	<target name="EmailNotification" if="emailsmtpserver">
		<mail mailhost="${emailsmtpserver}" subject="${subject}" from="${emailuser}" tolist="${emailtolist},${defaultemailto}" >
			<message>Installation log attached.</message>
			<attachments>
				<fileset dir="${patchdir}/${timestamp}/log">
					<include name="install-${timestamp-HHmm}.log"/>
				</fileset>
			</attachments>
		</mail>
	</target>
	
	<target name="Download">
		<echo message="Connecting to ftp server ${ftphost} :" />
		<input message="Enter ftp userid [Ex. codemove]?" addproperty="ftpuser" />
		<input message="Enter password for ${ftpuser}?" addproperty="ftppassword" />
		<input message="Enter ftp path for package [ relative to ${ftpuser} home directory ]?" addproperty="ftppath" />
		<ftp action="get" verbose="yes"
			server="${ftphost}"
			userid="${ftpuser}"
			password="${ftppassword}"
			remotedir="${ftppath}">
			<fileset dir="${patchdir}/${timestamp}/new">
				<include name="*" />
			</fileset>
		</ftp>
	</target>
</project>
