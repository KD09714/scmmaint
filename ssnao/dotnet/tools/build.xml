<!-- Modification History -->

<!-- Dharmendra Kumar   01/23/2014      Bounce IIS during deploy.                           -->
<!-- Dharmendra Kumar   01/23/2014      Change the token.                                   -->
<!-- Dharmendra Kumar   01/22/2014      Replace password in cfg file at runtime.            
					Update rollback code                                -->
<!-- Dharmendra Kumar   01/22/2014      Added Support to Rollback a package                 -->
<!-- Dharmendra Kumar   01/20/2014      Added Support to start/stop multiple application pool -->
<!-- Dharmendra Kumar   01/19/2014      Added Support to handle multiple virtual directory -->
<!-- Dharmendra Kumar	01/18/2014	Initial coding to deploy dotnet package of SS NAO  -->
<!-- version 2014.0.8 -->
<project name="DeployOnIIS" basedir=".." default="MachineInfo">
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<tstamp>
		<format property="timestamp" pattern="yyyyMMdd"/>
		<format property="timestamp-HHmm" pattern="yyyyMMdd-HHmm"/>
	</tstamp>
	
	<property file="cfg/deploy.cfg"/>
	<property file="cfg/lastinstall.cfg" />
	<property name="patchdir" value="D:/ssnao" />
    <mkdir dir="${patchdir}/${timestamp}/log" />
	<record name="${patchdir}/${timestamp}/log/install-${timestamp-HHmm}.log" />
	<record name="${patchdir}/${timestamp}/log/install.debug-${timestamp-HHmm}.log" loglevel="verbose" />
	
	<property environment="env" />
	<property name="app" value="${virtualdir}" />
	<property name="iishome" value="C:/inetpub/wwwroot" />
	<property name="emailuser" value="${env.USERNAME}@sungard.com" />
	<property name="defaultemailto" value="codemovegrp1@sungard.com" />
	<mkdir dir="${patchdir}/${timestamp}/new" />
	
	<target name="MachineInfo">
		<echo message="TIMESTAMP : ${timestamp-HHmm}"/>
		<echo message="SERVER    : ${env.COMPUTERNAME}" />
		<echo message="DOMAIN    : ${env.USERDOMAIN}" />
		<echo message="USER      : ${env.USERNAME}" />		
	</target>
	
	<target name="VerifyPackage">
		<if>
			<available file="${patchdir}/${timestamp}/new/${package}.zip" />
			<then>
				<property name="package.exists" value="true" />
				<echo message="${package}.zip Exists for Installation....!!" />
			</then>
			<else>
				<fail message="${patchdir}/${timestamp}/new/${package}.zip does not Exists..!!!" />
			</else>
		</if>
	</target>
	
	<target name="VerifyBackup">
		<echo message="Last Backup Date is found to be ${lastbackupdate}" />
		<for list="${virtualdir}" delimiter=";" param="vdir">
			<sequential>
				<if>
					<available file="${patchdir}/${lastbackupdate}/backup/@{vdir}.zip" />
					<then>
						 <input message="Do you want to revert with the backup of ${lastbackupdate}" validargs="y,n" addproperty="confirmrollback" />
					</then>
					<else>
						<fail message="${patchdir}/${lastbackupdate}/backup/@{vdir}.zip does not Exists..!!!" />
					</else>
				</if>
				<if>
					<equals arg1="${confirmrollback}" arg2="n" />
					<then>
						<fail message="User has opted not to proceed ....., Exiting." />
					</then>
					<else>
						<copy file="${patchdir}/${lastbackupdate}/backup/@{vdir}.zip" todir="${patchdir}/${timestamp}/rollback" overwrite="true" force="true" />
					</else>
				</if>
			</sequential>
		</for>
	</target>
	
	<target name="StopIIS" >
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="iisreset /stop" />
		</exec>
	</target>
	
	<target name="StartIIS" >
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="iisreset /start" />
		</exec>
	</target>
	
	<target name="RestartIIS" depends="StopIIS, StartIIS">
		<echo message="Restart completed." />
	</target>

	<target name="BackupCurrInstall" >
		<for list="${virtualdir}" delimiter=";" param="vdir">
			<sequential>
				<if>
					<available file="${patchdir}/${timestamp}/backup/@{vdir}.zip" />
					<then>
						<move file="${patchdir}/${timestamp}/backup/@{vdir}.zip" tofile="${patchdir}/${timestamp}/backup/@{vdir}-${timestamp-HHmm}.zip" preservelastmodified="true" />
					</then>
				</if>
		
				<echo message="Backing up the current installation.." />
				<mkdir dir="${iishome}/@{vdir}" />
				<copy todir="${patchdir}/${timestamp}/backup/@{vdir}" preservelastmodified="true" overwrite="true" force="true">
					<fileset dir="${iishome}/@{vdir}" />
				</copy>
				<delete dir="${iishome}/@{vdir}" />

				<!-- Zip the backup package -->
				<zip destfile="${patchdir}/${timestamp}/backup/@{vdir}.zip" >
					<fileset dir="${patchdir}/${timestamp}/backup/" >
						<include name="@{vdir}/**" />
					</fileset>
				</zip>
				<delete dir="${patchdir}/${timestamp}/backup/@{vdir}" />
			</sequential>
		</for>
	</target>

	<target name="CopyPackage" if="packagesource">
		<copy todir="${patchdir}/${timestamp}/new" overwrite="true" force="true">
			<fileset dir="${packagesource}" >
				<include name="*.zip" />
			</fileset>
		</copy>
	</target>
	
	<target name="InstallNewPackage" depends="BackupCurrInstall" >
		<for list="${virtualdir}" delimiter=";" param="vdir">
			<sequential>
				<unzip src="${patchdir}/${timestamp}/new/${package}.zip" dest="${patchdir}/${timestamp}/new" />
				<move todir="${iishome}/@{vdir}" preservelastmodified="true" >
					<fileset dir="${patchdir}/${timestamp}/new/${package}" />
				</move>
			</sequential>
		</for>
	</target>
	
	<target name="RevertPackage">
                <if>
                        <equals arg1="${confirmrollback}" arg2="y" />
                        <then>
                       		<for list="${virtualdir}" delimiter=";" param="vdir">
					<sequential>
                                		<unzip src="${patchdir}/${timestamp}/rollback/@{vdir}.zip" dest="${patchdir}/${timestamp}/rollback" />
                                		<move todir="${iishome}/@{vdir}" preservelastmodified="true" >
                                        		<fileset dir="${patchdir}/${timestamp}/rollback/@{vdir}" />
                                		</move>
                                	</sequential>
                                </for>
                        </then>
                </if>
        </target>
	
	<target name="SetupConfigFiles">
		<for list="${virtualdir}" delimiter=";" param="vdir">
			<sequential>
				<var name="envprofile" unset="true"/>
				<for list="${@{vdir}-configtosetup}" delimiter="|" param = "profile-cfgfilewpath">
					<sequential>
						<property name="envprofile" value="@{profile-cfgfilewpath}" />
						<var name="configtosetup" unset="true"/>
						<property name="configtosetup" value="@{profile-cfgfilewpath}" />
					</sequential>
				</for>
				<for list="${configtosetup}" delimiter=";" param = "cfgfilewpath">
					<sequential>
						<var name="cfgfile" unset="true"/>
						<var name="cfgdir" unset="true"/>
						<var name="cfgfilewoext" unset="true"/>

						<basename file="${iishome}/@{vdir}/@{cfgfilewpath}" property="cfgfile" />
						<dirname file="${iishome}/@{vdir}/@{cfgfilewpath}" property="cfgdir" />
						<for list="${cfgfile}" delimiter="." param = "ext">
							<sequential>
								<var name="ext" unset="true"/>
								<property name="ext" value="@{ext}" />
							</sequential>
						</for>
						<basename file="${installroot}/@{vdir}/@{cfgfilewpath}" property="cfgfilewoext" suffix="${ext}" />
						<move file="${cfgdir}/${cfgfilewoext}.${envprofile}.${ext}" tofile="${cfgdir}/${cfgfilewoext}.${ext}" preservelastmodified="true" force="true" overwrite="true" />
						<echo message="Configuring ${cfgdir}/${cfgfile} completed." />
					</sequential>
				</for>
			</sequential>
		</for>
	</target>
	
	<target name="Install" depends="MachineInfo, CopyPackage, VerifyPackage, StopIIS, BackupCurrInstall, InstallNewPackage, SetupConfigFiles, StartIIS">
		<echo message="Installation Completed for ${package}." />
		<property name="subject" value="Installation Completed for ${package} on ${env.COMPUTERNAME}" />
		<antcall target="EmailNotification" />
		<record name="${patchdir}/${timestamp}/log/install.debug-${timestamp-HHmm}.log" loglevel="verbose" action="stop" />
		
		<for list="${virtualdir}" delimiter=";" param="vdir">
			<sequential>
				<replace file="${iishome}/@{vdir}/Web.config">
                        		<replacefilter token="@G2_AO@" value="${G2_AO}" />
                        		<replacefilter token="@G2_AO_Local@" value="${G2_AO_Local}" />
                        		<replacefilter token="@CSA@" value="${CSA}" />
                        		<replacefilter token="@IPP@" value="${IPP}" />
                        		<replacefilter token="@IPP_Custom@" value="${IPP_Custom}" />
				</replace>
			</sequential>
		</for>
                <echo message="lastbackupdate=${timestamp}" file="cfg/lastinstall.cfg" force="true" />
	</target>
	
	<target name="Rollback" depends="MachineInfo, VerifyBackup, StopIIS, BackupCurrInstall, RevertPackage, StartIIS">
                <echo message="Rollback Completed for ${package}." />
                <property name="subject" value="Rollback Completed for ${package} on ${env.COMPUTERNAME}" />
                <antcall target="EmailNotification" />
        </target>
	
	<target name="EmailNotification" if="emailsmtpserver">
		<mail mailhost="${emailsmtpserver}" subject="${subject}" from="${emailuser}" tolist="${emailtolist},${defaultemailto}" >
			<message>Installation log attached.</message>
			<attachments>
				<fileset dir="${patchdir}/${timestamp}/log">
					<include name="install-${timestamp-HHmm}.log"/>
				</fileset>
			</attachments>
		</mail>
	</target>
	
	<target name="Download">
		<echo message="Connecting to ftp server ${ftphost} :" />
		<input message="Enter ftp userid [Ex. codemove]?" addproperty="ftpuser" />
		<input message="Enter password for ${ftpuser}?" addproperty="ftppassword" />
		<input message="Enter ftp path for package [ relative to ${ftpuser} home directory ]?" addproperty="ftppath" />
		<ftp action="get" verbose="yes"
			server="${ftphost}"
			userid="${ftpuser}"
			password="${ftppassword}"
			remotedir="${ftppath}">
			<fileset dir="${patchdir}/${timestamp}/new">
				<include name="*" />
			</fileset>
		</ftp>
	</target>
</project>
